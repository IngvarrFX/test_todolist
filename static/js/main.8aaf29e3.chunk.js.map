{"version":3,"sources":["components/Button.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Button","props","onClick","callBack","id","Todolist","title","tasks","map","mTasks","key","removeTask","type","checked","isDone","setFilterFoo","App","useState","tasks1","setTasks1","filter","setFilter","durShlak","td","className","task","console","log","valueF","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8QAMaA,G,MAAS,SAACC,GACnB,OACI,4BAAQC,QAAS,kBAAMD,EAAME,SAASF,EAAMG,MAA5C,OCUD,SAASC,EAASJ,GACrB,OAAO,6BACH,4BAAKA,EAAMK,OACX,6BACI,gCACA,sCAEJ,4BACKL,EAAMM,MAAMC,KAAI,SAACC,GACd,OACI,wBAAIC,IAAKD,EAAOL,IACZ,kBAAC,EAAD,CAAQD,SAAUF,EAAMU,WAAYP,GAAIK,EAAOL,KAC/C,2BAAOQ,KAAK,WAAWC,QAASJ,EAAOK,SACvC,8BAAOL,EAAOH,YAM9B,6BACI,4BAAQJ,QAAS,kBAAMD,EAAMc,aAAa,SAA1C,OACA,4BAAQb,QAAS,kBAAMD,EAAMc,aAAa,YAA1C,UACA,4BAAQb,QAAS,kBAAMD,EAAMc,aAAa,eAA1C,eCYGC,MA7Cf,WAEI,MAA0BC,mBAAS,CAC/B,CAACb,GAAI,EAAGE,MAAO,WAAYQ,QAAQ,GACnC,CAACV,GAAI,EAAGE,MAAO,KAAMQ,QAAQ,GAC7B,CAACV,GAAI,EAAGE,MAAO,UAAWQ,QAAQ,GAClC,CAACV,GAAI,EAAGE,MAAO,WAAYQ,QAAQ,GACnC,CAACV,GAAI,EAAGE,MAAO,QAASQ,QAAQ,GAChC,CAACV,GAAI,EAAGE,MAAO,UAAWQ,QAAQ,KANtC,mBAAKI,EAAL,KAAaC,EAAb,KASA,EAA0BF,mBAAQ,OAAlC,mBAAKG,EAAL,KAAaC,EAAb,KAOIC,EAAWJ,EAiBf,MAhBc,WAAXE,IACCE,EAAWJ,EAAOE,QAAO,SAAAG,GAAE,OAAKA,EAAGT,WAEzB,cAAXM,IACCE,EAAWJ,EAAOE,QAAO,SAAAG,GAAE,OAAIA,EAAGT,WAalC,yBAAKU,UAAU,OACX,kBAACnB,EAAD,CAAUC,MAAM,gBACNC,MAAOe,EACPX,WAVC,SAACP,GAChBc,EAASA,EAAOE,QAAO,SAAAK,GAAI,OAAIA,EAAKrB,KAAOA,KAC3Ce,EAAUD,GACVQ,QAAQC,IAAIT,IAQEH,aA3BG,SAACa,GAClBP,EAAUO,GACVF,QAAQC,IAAIP,QCVAS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SDqI5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnB,QAAQmB,MAAMA,EAAMC,c","file":"static/js/main.8aaf29e3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\ntype propsType = {\r\n    callBack: (id: number) => void\r\n    id: number\r\n}\r\nexport const Button = (props: propsType) => {\r\n    return (\r\n        <button onClick={() => props.callBack(props.id)}>X</button>\r\n    )\r\n}","import React from 'react';\r\nimport {Button} from './components/Button';\r\nimport {filterType} from './App';\r\n\r\ntype TaskType = {\r\n    id: number\r\n    title: string\r\n    isDone: boolean\r\n\r\n}\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: number) => void\r\n    setFilterFoo: (valueF: filterType ) => void\r\n}\r\n\r\nexport function Todolist(props: PropsType) {\r\n    return <div>\r\n        <h3>{props.title}</h3>\r\n        <div>\r\n            <input/>\r\n            <button>+</button>\r\n        </div>\r\n        <ul>\r\n            {props.tasks.map((mTasks) => {\r\n                return (\r\n                    <li key={mTasks.id}>\r\n                        <Button callBack={props.removeTask} id={mTasks.id}/>\r\n                        <input type=\"checkbox\" checked={mTasks.isDone}/>\r\n                        <span>{mTasks.title}</span>\r\n\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n        <div>\r\n            <button onClick={() => props.setFilterFoo('All')}>All</button>\r\n            <button onClick={() => props.setFilterFoo('Active')}>Active</button>\r\n            <button onClick={() => props.setFilterFoo('Completed')}>Completed</button>\r\n        </div>\r\n    </div>\r\n}\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Todolist} from './Todolist';\r\n\r\n\r\nexport type filterType = `All` | `Active` | `Completed`\r\n\r\nfunction App() {\r\n\r\n    let [tasks1, setTasks1] = useState([\r\n        {id: 1, title: 'HTML&CSS', isDone: true},\r\n        {id: 2, title: 'JS', isDone: true},\r\n        {id: 3, title: 'ReactJS', isDone: false},\r\n        {id: 4, title: 'HTML&CSS', isDone: true},\r\n        {id: 5, title: 'REDUX', isDone: false},\r\n        {id: 6, title: 'ReactJS', isDone: false},\r\n    ])\r\n\r\n    let [filter, setFilter] = useState<filterType>(`All`)\r\n\r\n    const setFilterFoo = (valueF: filterType) => {\r\n        setFilter(valueF)\r\n        console.log(filter)\r\n    }\r\n\r\n    let durShlak = tasks1\r\n    if(filter === \"Active\"){\r\n        durShlak = tasks1.filter(td => !td.isDone)\r\n    }\r\n    if(filter === \"Completed\"){\r\n        durShlak = tasks1.filter(td => td.isDone)\r\n    }\r\n\r\n\r\n\r\n\r\n    const removeTask = (id: number) => {\r\n        tasks1 = tasks1.filter(task => task.id !== id)\r\n        setTasks1(tasks1)\r\n        console.log(tasks1)\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Todolist title=\"What to learn\"\r\n                      tasks={durShlak}\r\n                      removeTask={removeTask}\r\n                      setFilterFoo={setFilterFoo}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}